#!/bin/bash

pushd "$HOME/.dotfiles" > /dev/null
(git fetch -q &) 1> /dev/null
if [ $(git rev-list --left-right origin...HEAD | wc -l) -ne "0" ]; then
  echo "╭───────────────────────────────────────────╮"
  echo "│                                           │"
  echo "│    New version of \033[1;32m.dotfiles\033[0m available!    │"
  echo "│                                           │"
  echo "│  To Update:                               │"
  echo "│  cd ~/.dotfiles && git pull && ./install  │"
  echo "│                                           │"
  echo "╰───────────────────────────────────────────╯"
fi
popd > /dev/null

# Enable colors in ls
alias ls='ls --color=auto'

if [ -d "$HOME/.local/bin" ]; then
	export PATH="$HOME/.local/bin:$PATH"
fi

if [ -d "$HOME/.local/lib" ]; then
	export LD_LIBRARY_PATH="$HOME/.local/lib:$LD_LIBRARY_PATH"
fi

if [ -d "$HOME/.local/lib/python" ]; then
	export PYTHONPATH="$HOME/.local/lib/python:$PYTHONPATH"
fi

# rust
if [ -d "$HOME/.cargo/bin" ]; then
  export PATH="$HOME/.cargo/bin:$PATH"
fi

# homebrew
if [ -x "$(command -v arch)" ]; then
  if [[ ("$(arch)" == "i386") && (-x "/opt/intelbrew/bin/brew") ]]; then
    eval "$(/opt/intelbrew/bin/brew shellenv)"
  fi
  if [[ ("$(arch)" == "arm64") && (-x "/opt/homebrew/bin/brew") ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  fi
  if [[ -x "/home/linuxbrew/.linuxbrew/bin/brew" ]]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  fi

  if [ -f "$HOME/.local/bin/curl" ]; then
    export HOMEBREW_CURL_PATH="$HOME/.local/bin/curl"
  fi
fi

# conda
if [ -x "$(command -v brew)" ]; then
  if [ -f "$(brew --prefix)/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
    source "$(brew --prefix)/Caskroom/miniconda/base/etc/profile.d/conda.sh"
  fi
fi

# ruby
if [ -x "$(command -v brew)" ]; then
  if [ -d "$(brew --prefix)/opt/ruby/bin" ]; then
    export PATH="$(brew --prefix)/opt/ruby/bin:$PATH"
  fi
fi

# chruby
if [ -x "$(command -v brew)" ]; then
  if [ -d "$(brew --prefix)/opt/chruby" ]; then
    source $(brew --prefix)/opt/chruby/share/chruby/chruby.sh
    source $(brew --prefix)/opt/chruby/share/chruby/auto.sh
  fi
fi

# go
if [ -x "$(command -v go)" ]; then
  export GOPATH=$(go env GOPATH)
  export PATH="$GOPATH/bin:$PATH"
fi

# java
if [ -f /usr/libexec/java_home ]; then
	export JAVA_HOME=`/usr/libexec/java_home 2> /dev/null`
fi

# draw.io
if [ -f /Applications/draw.io.app/Contents/MacOS/draw.io ]; then
  alias draw.io='/Applications/draw.io.app/Contents/MacOS/draw.io'
fi

# git-sqash-merged
if [ -x "$(command -v git)" ]; then
  git-squash-merged() {
    local parent=$(git rev-parse --abbrev-ref HEAD)
    git for-each-ref refs/heads/ "--format=%(refname:short)" | while read branch; do 
      local mergeBase=$(git merge-base $parent $branch)
      if [[ $(git cherry $parent $(git commit-tree $(git rev-parse "$branch^{tree}") -p $mergeBase -m _)) == "-"* ]]; then
        echo $branch;
      fi
    done
  }
fi

# resize
if [[ "$(uname)" == "Darwin" ]]; then
  resize() {
    resolution() {
      if [[ "$1" == "480p" ]]; then
        echo "{720, 480}"
      elif [[ "$1" == "720p" ]]; then
        echo "{1280, 720}"
      elif [[ "$1" == "1080p" ]]; then
        echo "{1920, 1080}"
      elif [[ "$1" == "1440p" ]]; then
        echo "{2560, 1440}"
      elif [[ "$1" == "4k" ]]; then
        echo "{3840, 2160}"
      elif [[ "$1" == "5k" ]]; then
        echo "{5120, 2880}"
      elif [[ "$1" == "8k" ]]; then
        echo "{7680, 4320}"
      else
        echo >&2 "Unknown resolution: $1"
        return 1
      fi
    }

    if [ "$#" -eq 5 ]; then
      osascript -e "
        tell application \"System Events\" to tell process \"$1\"
          tell front window
            set position to {$2, $3}
            set size to {$4, $5}
          end tell
        end tell"
    elif [ "$#" -eq 4 ]; then
      local res=$(resolution $4) || return 1
      osascript -e "
        tell application \"System Events\" to tell process \"$1\"
          tell front window
            set position to {$2, $3}
            set size to $res
          end tell
        end tell"
    elif [ "$#" -eq 3 ]; then
      osascript -e "tell application \"System Events\" to ¬
        set size of front window of process \"$1\" to {$2, $3}"
    elif [ "$#" -eq 2 ]; then
      local res=$(resolution $2) || return 1
      osascript -e "tell application \"System Events\" to ¬
        set size of front window of process \"$1\" to $res"
    elif [ "$#" -eq 0 ]; then
      echo "Usage: app [position] [resolution]"
      return 1
    fi
    osascript -e "tell application \"System Events\" to ¬
      get {position, size} of front window of process \"$1\""
  }
fi

# less
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;33;03;40m'

# TTY Sundried Colors
if [ "$TERM" = "linux" ]; then
  echo -en "\e]P0000000" # black
  echo -en "\e]P1b75a4d" # red
  echo -en "\e]P26a8855" # darkgreen
  echo -en "\e]P3ae7237" # yellow
  echo -en "\e]P4596fa8" # blue
  echo -en "\e]P5995963" # magenta
  echo -en "\e]P65e8d87" # cyan
  echo -en "\e]P7d3d3d3" # white
  echo -en "\e]P8606059" # bright black
  echo -en "\e]P9ba180a" # bright red
  echo -en "\e]Pa009a2a" # bright green
  echo -en "\e]Pbfe7f29" # bright yellow
  echo -en "\e]Pc8bacf9" # bright blue
  echo -en "\e]Pdff9fb0" # bright magenta
  echo -en "\e]Pe00bea4" # bright cyan
  echo -en "\e]Pffefefe" # bright white
fi

# Default Editor
if [ -x "$(command -v vim)" ]; then
  export EDITOR=$(which vim)
fi
